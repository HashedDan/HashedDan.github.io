<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Mangum</title>
    <link>https://danielmangum.com/</link>
    <description>Recent content on Daniel Mangum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 09 Dec 2020 05:51:26 -0500</lastBuildDate>
    
	<atom:link href="https://danielmangum.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Conference Talk: Building an Enterprise Infrastructure Control Plane on Kubernetes</title>
      <link>https://danielmangum.com/posts/kubecon-na-20-infra-control-plane/</link>
      <pubDate>Wed, 09 Dec 2020 05:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/kubecon-na-20-infra-control-plane/</guid>
      <description>I had the privilege of joining Steven Borrelli from Mastercard for a tutorial at Kubecon North America 2020 on building an enterprise infrastructure control plane on Kubernetes using Crossplane. Relevant links and the talk recording can be found below.
 Slide Deck Source Code Text Transcript    Please feel free to send me a message @hasheddan on Twitter with any questions or comments!</description>
    </item>
    
    <item>
      <title>Installing Vivado 2020.x on Ubuntu 20.04</title>
      <link>https://danielmangum.com/posts/vivado-2020-x-ubuntu-20-04/</link>
      <pubDate>Sun, 06 Dec 2020 05:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/vivado-2020-x-ubuntu-20-04/</guid>
      <description>Vivado is Xilinx&amp;rsquo;s IDE for HDL synthesis and analysis. It is a powerful tool, but can be a bit of a pain to setup and use. I recently went through the installation process on my main development machine, where I cam currently running Ubuntu 20.04, after I purchased a Digilent Arty A7-35T development board, which is designed around the Xilinx Artix-7 FPGA. While it didn&amp;rsquo;t take too long to get up and running (ignoring the time waiting for the actual installation to complete), I found the existing installation documentation quite verbose, which made following along more difficult than it should have been.</description>
    </item>
    
    <item>
      <title>Tweet Thread: Crossplane Packages and K8s Features You Thought You Didn&#39;t Have</title>
      <link>https://danielmangum.com/posts/crossplane-packages-k8s-features/</link>
      <pubDate>Mon, 30 Nov 2020 05:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/crossplane-packages-k8s-features/</guid>
      <description>The following is an unroll of a tweet thread about Crossplane packages that I posted after reading Dave Anderson&amp;rsquo;s post &amp;ldquo;A better Kubernetes, from the ground up&amp;rdquo;. I found many of the points in the post compelling, but feel that the existing extensibility model of Kubernetes allows for implementing at least some of the desired features without tearing down the entire system, as evidenced by the implementation of Crossplane packages. It is my hope that some of the design decisions we have made with Crossplane can be generally abstracted and improved upon to continue to enhance the Kubernetes ecosystem.</description>
    </item>
    
    <item>
      <title>Understanding Non-Local Jumps (setjmp/longjmp) in RISC-V Assembly</title>
      <link>https://danielmangum.com/posts/non-local-jumps-riscv/</link>
      <pubDate>Sun, 25 Oct 2020 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/non-local-jumps-riscv/</guid>
      <description>This post explores RISC-V assembly by examining the implementation of the setjmp and longjmp functions from the C standard library. I frequently find that I grasp concepts more quickly when I have actual code that I can disassemble because it allows me to connect information with intent. I believe RISC-V and similar efforts will fundamentally shift how computers are made and programmed. I hope that sharing my knowledge will inspire the same joy in others that I feel when imagining a future of open hardware.</description>
    </item>
    
    <item>
      <title>Podcast Guest: Using Kubernetes And Crossplane To Provision Cloud Infrastructure (Full Stack Journey)</title>
      <link>https://danielmangum.com/posts/podcast-fullstackjourney-crossplane/</link>
      <pubDate>Tue, 20 Oct 2020 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/podcast-fullstackjourney-crossplane/</guid>
      <description>I joined Scott Lowe on the Full Stack Journey podcast for a chat about how Crossplane enables you to provision infrastructure from your Kubernetes cluster and allows you to compose abstractions that define your own PaaS. You can listen here.</description>
    </item>
    
    <item>
      <title>Uppercase .S vs Lowercase .s File Extensions in GAS Syntax Assembly</title>
      <link>https://danielmangum.com/posts/upper-v-lower-extensions-assembly/</link>
      <pubDate>Sun, 18 Oct 2020 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/upper-v-lower-extensions-assembly/</guid>
      <description>If you have ever written assembly for the GNU Assembler (GAS), you may have noticed that files sometimes have an .S extension and sometimes .s. This is not a meaningless distinction, and you could have a frustrating time if you accidentally use the wrong one.
The uppercase .S indicates that the file contents should be run through the preprocessor, while the lowercase .s indicates that the file contents should be assembled directly.</description>
    </item>
    
    <item>
      <title>Podcast Guest: What is Rapid Prototyping? (The DroidDevCast)</title>
      <link>https://danielmangum.com/posts/podcast-droiddevcast-rapid-prototyping/</link>
      <pubDate>Fri, 25 Sep 2020 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/podcast-droiddevcast-rapid-prototyping/</guid>
      <description>I joined Rin Oliver on the esper.io DroidDevCast for a chat about rapid prototyping. You can listen here.</description>
    </item>
    
    <item>
      <title>Podcast Guest: Daniel Mangum on Crossplane, building a PaaS, and Multi-Cluster Kubernetes (LOTE)</title>
      <link>https://danielmangum.com/posts/podcast-lote-crossplane-kubernetes/</link>
      <pubDate>Wed, 08 Jul 2020 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/podcast-lote-crossplane-kubernetes/</guid>
      <description>I joined Daniel Bryant on the Ambassador Livinâ€™ on the Edge podcast for a chat about Crossplane, building your own PaaS, and the future of multi-cluster Kubernetes. You can listen here.</description>
    </item>
    
    <item>
      <title>Guest Post: Adding Managed Services to Serverless with Crossplane and OpenFaaS (OpenFaaS Blog)</title>
      <link>https://danielmangum.com/posts/crossplane-openfaas/</link>
      <pubDate>Mon, 30 Mar 2020 14:39:17 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/crossplane-openfaas/</guid>
      <description>I had the opportunity to write up a recap and guide for the livestream I did with Alex Ellis on using Crossplane with OpenFaas. It is available here.</description>
    </item>
    
    <item>
      <title>Guest Post: Connecting AWS managed services to your Argo CD pipeline with open source Crossplane (AWS Open Source Blog)</title>
      <link>https://danielmangum.com/posts/crossplane-aws-open-source/</link>
      <pubDate>Tue, 10 Mar 2020 14:39:17 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/crossplane-aws-open-source/</guid>
      <description>I had the privilege of writing a guest post on the AWS Open Source Blog entitled &amp;ldquo;Connecting AWS managed services to your Argo CD pipeline with open source Crossplane&amp;rdquo;. You can read it here.</description>
    </item>
    
    <item>
      <title>Podcast Guest: Gerhard goes to KubeCon (part 2) (The Changelog)</title>
      <link>https://danielmangum.com/posts/podcast-changelog-kubecon-crossplane/</link>
      <pubDate>Fri, 27 Dec 2019 18:51:26 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/podcast-changelog-kubecon-crossplane/</guid>
      <description>Jared Watts, Marques Johansson, and I sat down for a chat about Crossplane and the cloud native community with Gerhard Lazu on the Changelog Podcast at Kubecon North America 2019. You can listen here.</description>
    </item>
    
    <item>
      <title>Please Mind Your Metaphors</title>
      <link>https://danielmangum.com/posts/please-mind-your-metaphors/</link>
      <pubDate>Mon, 19 Aug 2019 00:07:58 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/please-mind-your-metaphors/</guid>
      <description>Note: While writing this post, I looked back at a post I wrote entitled Understanding ETL to ELT by Going to Costco. That post does exactly what I say we should not do in this post. It takes a process and explains it using a metaphor that cannot hope to fully encompass what I try to say. I do think that metaphors can be somewhat useful when attempting to give a high-level overview of a subject, but I think I did it rather poorly in that post.</description>
    </item>
    
    <item>
      <title>HashiCode Ep. 1: Terraform Remote State Backend Locking</title>
      <link>https://danielmangum.com/posts/tf-remote-state-backend-locking/</link>
      <pubDate>Mon, 17 Jun 2019 00:31:39 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/tf-remote-state-backend-locking/</guid>
      <description>This is the first installment of HashiCode, a blog post series where I go through the source code of HashiCorp tools to learn more about what happens behind the scenes when you interact with tools as a user.
Disclaimer: this episode is referencing code from the Terraform codebase as of commit 43a7548. Becuase Terraform is a constanly evolving open source tool, the code is subject to change. However, the ideas expressed will largely remain the same.</description>
    </item>
    
    <item>
      <title>Introducing HashiCode</title>
      <link>https://danielmangum.com/posts/introducing-hashicode/</link>
      <pubDate>Mon, 17 Jun 2019 00:21:59 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/introducing-hashicode/</guid>
      <description>Today I am excited to announce a new series of blog posts called HashiCode. I have been involved with the HashiCorp community for some time now, and I have loved the opportunity to contribute to some of my favorite tools because of the open source model of the company. Recently, I have been organizing the new HashiCorp User Group in St. Louis, a market that is starting to show a lot of interest in the various products the company offers.</description>
    </item>
    
    <item>
      <title>Presence vs. Planning</title>
      <link>https://danielmangum.com/posts/presence-vs-planning/</link>
      <pubDate>Wed, 22 May 2019 16:36:56 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/presence-vs-planning/</guid>
      <description>Sometimes I find it hard to focus on the work I am doing. It can be easy to constantly be evaluating how everything you are doing affects the present, affects your future, and affects those around you. These are good questions to be asking, but at the right time. If we are always planning, how are we ever going to get anything done? On the other hand, if we are never planning, how do we have context when choosing what to do next?</description>
    </item>
    
    <item>
      <title>Understanding ETL to ELT by Going to Costco</title>
      <link>https://danielmangum.com/posts/etl-to-elt/</link>
      <pubDate>Sat, 13 Apr 2019 14:39:17 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/etl-to-elt/</guid>
      <description>If you have dealt with any data platform in the last few years, you have likely heard about the movement from traditional ETL (Extract Transform Load) to ELT (Extract Load Transform). The name ELT is self-explanatory as the sequential order of tasks is switched such that loading comes before the transformation, but it takes a little more investigation to understand why the movement has taken place and how it is even possible.</description>
    </item>
    
    <item>
      <title>Immediate Reflections on the AWS Solutions Architect Associate Exam (February 2019)</title>
      <link>https://danielmangum.com/posts/aws-solutions-architect-associate-exam-reflections/</link>
      <pubDate>Mon, 11 Feb 2019 15:41:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/aws-solutions-architect-associate-exam-reflections/</guid>
      <description>I passed the AWS Solutions Architect Associate Certification Exam today and I wanted to write up a few immediate thoughts because I still feel as though the process is somewhat opaque for most people. Part of this may be because of the NDA that you are required to agree to prior to taking the exam. To be clear, everything mentioned in this post will be from a broad perspective and will not include any questions, materials, or test-specific information.</description>
    </item>
    
    <item>
      <title>Why You Shouldn&#39;t Use ^Parameters with CloudFormation Templates</title>
      <link>https://danielmangum.com/posts/why-you-shouldnt-use-parameters-with-cloudformation-templates/</link>
      <pubDate>Thu, 07 Feb 2019 15:17:47 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/why-you-shouldnt-use-parameters-with-cloudformation-templates/</guid>
      <description>^Run-Time (I admit that the title is intended to be clickbait)
CloudFormation has become a popular Infrastructure as Code (IaC) tool for organizations that use AWS exclusively as their cloud provider (whether it should be or not is another whole discussion). The tool features the ability to add parameters to your configuration scripts (written in either YAML or JSON). However, I will argue in this post that you should not use parameters in your (top-level) scripts by enumerating Adam Jacob&amp;rsquo;s (creator of Chef) 10 principles of IaC as detailed in his chapter in Web Operations and illustrating how the use of parameters either violates or does not add any further value for each of them.</description>
    </item>
    
    <item>
      <title>Dockerfile for Building Ionic Apps</title>
      <link>https://danielmangum.com/posts/dockerfile-for-building-ionic-apps/</link>
      <pubDate>Tue, 16 Oct 2018 22:33:54 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/dockerfile-for-building-ionic-apps/</guid>
      <description>Building apps using Ionic is useful for the ability to build for both IOS and Android from the same codebase. However, mostly because Ionic is build on top of the Apache Cordova framework, it can be difficult to make sure your environment is configured with the required version of each build component.
This is where Docker can be helpful. You can create a container that has a consistent environment and run it locally to build your project.</description>
    </item>
    
    <item>
      <title>Simple Linux Command Line Using Docker</title>
      <link>https://danielmangum.com/posts/simple-linux-command-line-using-docker/</link>
      <pubDate>Sat, 13 Oct 2018 13:21:42 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/simple-linux-command-line-using-docker/</guid>
      <description>Docker containers are widely used for developing and running anything from web applications to redis caches. However, they can also be useful for running what can effectively be a light VM (a container operates very differently from a VM, but we are just talking about the use case). I like to use a container for accessing the the Linux command line. However, many users do not know how to run a container in the background and access the shell.</description>
    </item>
    
    <item>
      <title>Local Kong API Gateway for Go Web Server</title>
      <link>https://danielmangum.com/posts/local-kong-go-web-server/</link>
      <pubDate>Thu, 26 Jul 2018 15:52:16 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/local-kong-go-web-server/</guid>
      <description>This guide will teach you how to run the Kong API gateway locally as a proxy server for a Golang API using Docker.
The Go API The Golang standard library has a very simple http library that makes it very easy to spin up a web server. For now, we will build the simplest implementation of a web server. Start by creating a new directory in your go/src/.
mkdir go-api &amp;amp;&amp;amp; cd $_ Then create a new file main.</description>
    </item>
    
    <item>
      <title>Why I am Starting a Blog</title>
      <link>https://danielmangum.com/posts/why-i-am-starting-a-blog/</link>
      <pubDate>Wed, 20 Jun 2018 20:18:47 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/why-i-am-starting-a-blog/</guid>
      <description>I have always been envious of developers who share valuable information on their blog. I have thought for a long time that I wanted to be one of those developers that became famous in programming circles for the insight they shared. However, this also led me to be intimidated by the idea of writing my own posts. How could I ever measure up to these developers?
That mindset changed when I realized how much I had benefitted in work, school, and on personal projects from the blog posts of developers.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://danielmangum.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danielmangum.com/about/</guid>
      <description>My name is Daniel Mangum and I am a senior software engineer at Upbound. I am primarily interested in distributed systems, developer tools, automated infrastructure, programming languages, and compilers. My previous employers are listed below.
 Slalom Compassion International Hashed Health Washington University Investment Management Company Deloitte  </description>
    </item>
    
  </channel>
</rss>