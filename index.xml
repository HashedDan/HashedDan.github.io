<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Mangum</title>
    <link>https://danielmangum.com/</link>
    <description>Recent content on Daniel Mangum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 May 2019 16:36:56 -0500</lastBuildDate>
    
	<atom:link href="https://danielmangum.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Presence vs. Planning</title>
      <link>https://danielmangum.com/posts/presence-vs-planning/</link>
      <pubDate>Wed, 22 May 2019 16:36:56 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/presence-vs-planning/</guid>
      <description>Sometimes I find it hard to focus on the work I am doing. It can be easy to constantly be evaluating how everything you are doing affects the present, affects your future, and affects those around you. These are good questions to be asking, but at the right time. If we are always planning, how are we ever going to get anything done? On the other hand, if we are never planning, how do we have context when choosing what to do next?</description>
    </item>
    
    <item>
      <title>Understanding ETL to ELT by Going to Costco</title>
      <link>https://danielmangum.com/posts/etl-to-elt/</link>
      <pubDate>Sat, 13 Apr 2019 14:39:17 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/etl-to-elt/</guid>
      <description>If you have dealt with any data platform in the last few years, you have likely heard about the movement from traditional ETL (Extract Transform Load) to ELT (Extract Load Transform). The name ELT is self-explanatory as the sequential order of tasks is switched such that loading comes before the transformation, but it takes a little more investigation to understand why the movement has taken place and how it is even possible.</description>
    </item>
    
    <item>
      <title>Immediate Reflections on the AWS Solutions Architect Associate Exam (February 2019)</title>
      <link>https://danielmangum.com/posts/aws-solutions-architect-associate-exam-reflections/</link>
      <pubDate>Mon, 11 Feb 2019 15:41:34 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/aws-solutions-architect-associate-exam-reflections/</guid>
      <description>I passed the AWS Solutions Architect Associate Certification Exam today and I wanted to write up a few immediate thoughts because I still feel as though the process is somewhat opaque for most people. Part of this may be because of the NDA that you are required to agree to prior to taking the exam. To be clear, everything mentioned in this post will be from a broad perspective and will not include any questions, materials, or test-specific information.</description>
    </item>
    
    <item>
      <title>Why You Shouldn&#39;t Use ^Parameters with CloudFormation Templates</title>
      <link>https://danielmangum.com/posts/why-you-shouldnt-use-parameters-with-cloudformation-templates/</link>
      <pubDate>Thu, 07 Feb 2019 15:17:47 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/why-you-shouldnt-use-parameters-with-cloudformation-templates/</guid>
      <description>^Run-Time (I admit that the title is intended to be clickbait)
CloudFormation has become a popular Infrastructure as Code (IaC) tool for organizations that use AWS exclusively as their cloud provider (whether it should be or not is another whole discussion). The tool features the ability to add parameters to your configuration scripts (written in either YAML or JSON). However, I will argue in this post that you should not use parameters in your (top-level) scripts by enumerating Adam Jacob&amp;rsquo;s (creator of Chef) 10 principles of IaC as detailed in his chapter in Web Operations and illustrating how the use of parameters either violates or does not add any further value for each of them.</description>
    </item>
    
    <item>
      <title>Dockerfile for Building Ionic Apps</title>
      <link>https://danielmangum.com/posts/dockerfile-for-building-ionic-apps/</link>
      <pubDate>Tue, 16 Oct 2018 22:33:54 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/dockerfile-for-building-ionic-apps/</guid>
      <description>Building apps using Ionic is useful for the ability to build for both IOS and Android from the same codebase. However, mostly because Ionic is build on top of the Apache Cordova framework, it can be difficult to make sure your environment is configured with the required version of each build component.
This is where Docker can be helpful. You can create a container that has a consistent environment and run it locally to build your project.</description>
    </item>
    
    <item>
      <title>Simple Linux Command Line Using Docker</title>
      <link>https://danielmangum.com/posts/simple-linux-command-line-using-docker/</link>
      <pubDate>Sat, 13 Oct 2018 13:21:42 -0500</pubDate>
      
      <guid>https://danielmangum.com/posts/simple-linux-command-line-using-docker/</guid>
      <description>Docker containers are widely used for developing and running anything from web applications to redis caches. However, they can also be useful for running what can effectively be a light VM (a container operates very differently from a VM, but we are just talking about the usecase). I like to use a container for accessing the the Linux command line. However, many users do not know how to run a container in the background and access the shell.</description>
    </item>
    
    <item>
      <title>Local Kong API Gateway for Go Web Server</title>
      <link>https://danielmangum.com/posts/local-kong-go-web-server/</link>
      <pubDate>Thu, 26 Jul 2018 15:52:16 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/local-kong-go-web-server/</guid>
      <description>This guide will teach you how to run the Kong API gateway locally as a proxy server for a Golang API using Docker.
The Go API The Golang standard library has a very simple http library that makes it very easy to spin up a web server. For now, we will build the simplest implementation of a web server. Start by creating a new directory in your go/src/.
mkdir go-api &amp;amp;&amp;amp; cd $_ Then create a new file main.</description>
    </item>
    
    <item>
      <title>Why I am Starting a Blog</title>
      <link>https://danielmangum.com/posts/why-i-am-starting-a-blog/</link>
      <pubDate>Wed, 20 Jun 2018 20:18:47 -0600</pubDate>
      
      <guid>https://danielmangum.com/posts/why-i-am-starting-a-blog/</guid>
      <description>I have always been envious of developers who share valuable information on their blog. I have thought for a long time that I wanted to be one of those developers that became famous in programming circles for the insight they shared. However, this also led me to be intimidated by the idea of writing my own posts. How could I ever measure up to these developers?
That mindset changed when I realized how much I had benefitted in work, school, and on personal projects from the blog posts of developers.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://danielmangum.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://danielmangum.com/about/</guid>
      <description>My name is Daniel Mangum and I am a software engineer and computer science student at Washington University in St. Louis. I am primarily interested in developer tools, automated infrastructure, programming languages, and compilers. My previous employers are listed below.
 Compassion International Hashed Health Washington University Investment Management Company Deloitte  </description>
    </item>
    
  </channel>
</rss>